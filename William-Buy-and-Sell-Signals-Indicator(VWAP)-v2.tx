//@version=6
// This Pine Script™ code is subject to the terms:
// Copyright © 2025 Tugume William Mutara (watchdawg2025). All rights reserved.
// Unauthorized copying, sharing, or modification of this script is strictly prohibited.

// *** Good traders try to avoid losing money ***
// *** Great traders accept they will lose money ***
indicator("William's Buy & Sell Signals - Indicator - v1", overlay = true)

// === timeframe multiplier inputs ===
useres = true
intres = input.int(26, title="Timeframe Multiplier eg. 10min, 60min", tooltip="This value determines the multiplier for the timeframe resolution.")
stratres = timeframe.ismonthly ? str.tostring(timeframe.multiplier * intres, '###m') : timeframe.isweekly ? str.tostring(timeframe.multiplier * intres, '###w') : timeframe.isdaily ? str.tostring(timeframe.multiplier * intres, '###d') : timeframe.isintraday ? str.tostring(timeframe.multiplier * intres, '####') : '60'

// === smma function ===
f_smma(src, length) =>
    var float smma = na
    sma_1 = ta.sma(src, length)
    smma := na(smma) ? sma_1 : (smma * (length - 1) + src) / length
    smma

// === security wrapper for repeat calls ===
reso(exp, use, res) =>
    security_1 = request.security(syminfo.tickerid, res, exp, gaps = barmerge.gaps_off, lookahead = barmerge.lookahead_on)
    use ? security_1 : exp

// === generate ma series ===
malength = input.int(2, title="Moving Average Length", tooltip="Length for the Moving Average (MA) series.")
closeseries = f_smma(close, malength)
openseries = f_smma(open, malength)

// === get alternate resolution series ===
closeseriesalt = reso(closeseries, useres, stratres)
openseriesalt = reso(openseries, useres, stratres)

// vwap
hideonDWM = input(false, title="Hide VWAP on 1D or Above", group="VWAP Settings", display = display.data_window)
var anchor = input.string(defval = "Session", title="Anchor Period",
 options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
src = input(title = "Source", defval = hlc3, group="VWAP Settings", display = display.data_window)
offset = input.int(0, title="Offset", group="VWAP Settings", minval=0, display = display.data_window)

BANDS_GROUP = "Bands Settings"
CALC_MODE_TOOLTIP = "Determines the units used to calculate the distance of the bands. When 'Percentage' is selected, a multiplier of 1 means 1%."
calcModeInput = input.string("Standard Deviation", "Bands Calculation Mode", options = ["Standard Deviation", "Percentage"], group = BANDS_GROUP, tooltip = CALC_MODE_TOOLTIP, display = display.data_window)
showBand_1 = input(true, title = "", group = BANDS_GROUP, inline = "band_1", display = display.data_window)
bandMult_1 = input.float(1.0, title = "Bands Multiplier #1", group = BANDS_GROUP, inline = "band_1", step = 0.5, minval=0, display = display.data_window)
showBand_2 = input(false, title = "", group = BANDS_GROUP, inline = "band_2", display = display.data_window)
bandMult_2 = input.float(2.0, title = "Bands Multiplier #2", group = BANDS_GROUP, inline = "band_2", step = 0.5, minval=0, display = display.data_window)
showBand_3 = input(false, title = "", group = BANDS_GROUP, inline = "band_3", display = display.data_window)
bandMult_3 = input.float(3.0, title = "Bands Multiplier #3", group = BANDS_GROUP, inline = "band_3", step = 0.5, minval=0, display = display.data_window)

cumVolume = ta.cum(volume)
if barstate.islast and cumVolume == 0
    runtime.error("No volume is provided by the data vendor.")

new_earnings = request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_dividends = request.dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_split = request.splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)

isNewPeriod = switch anchor
	"Earnings"  => not na(new_earnings)
	"Dividends" => not na(new_dividends)
	"Splits"    => not na(new_split)
	"Session"   => timeframe.change("D")
	"Week"      => timeframe.change("W")
	"Month"     => timeframe.change("M")
	"Quarter"   => timeframe.change("3M")
	"Year"      => timeframe.change("12M")
	"Decade"    => timeframe.change("12M") and year % 10 == 0
	"Century"   => timeframe.change("12M") and year % 100 == 0
	=> false

isEsdAnchor = anchor == "Earnings" or anchor == "Dividends" or anchor == "Splits"
if na(src[1]) and not isEsdAnchor
	isNewPeriod := true

float vwapValue = na
float upperBandValue1 = na
float lowerBandValue1 = na
float upperBandValue2 = na
float lowerBandValue2 = na
float upperBandValue3 = na
float lowerBandValue3 = na

if not (hideonDWM and timeframe.isdwm)
    [_vwap, _stdevUpper, _] = ta.vwap(src, isNewPeriod, 1)
	vwapValue := _vwap
    stdevAbs = _stdevUpper - _vwap
	bandBasis = calcModeInput == "Standard Deviation" ? stdevAbs : _vwap * 0.01
	upperBandValue1 := _vwap + bandBasis * bandMult_1
	lowerBandValue1 := _vwap - bandBasis * bandMult_1
	upperBandValue2 := _vwap + bandBasis * bandMult_2
	lowerBandValue2 := _vwap - bandBasis * bandMult_2
	upperBandValue3 := _vwap + bandBasis * bandMult_3
	lowerBandValue3 := _vwap - bandBasis * bandMult_3

plot(vwapValue, title="VWAP", color=#2962FF, offset=offset)
plot(closeseriesalt, title = "Alternate Closes Series", color = color.orange, offset = offset)

upperBand_1 = plot(upperBandValue1, title="Upper Band #1", color=color.green, offset=offset, display = showBand_1 ? display.all : display.none)
lowerBand_1 = plot(lowerBandValue1, title="Lower Band #1", color=color.green, offset=offset, display = showBand_1 ? display.all : display.none)
fill(upperBand_1, lowerBand_1, title="Bands Fill #1", color= color.new(color.green, 95)    , display = showBand_1 ? display.all : display.none)

upperBand_2 = plot(upperBandValue2, title="Upper Band #2", color=color.olive, offset=offset, display = showBand_2 ? display.all : display.none)
lowerBand_2 = plot(lowerBandValue2, title="Lower Band #2", color=color.olive, offset=offset, display = showBand_2 ? display.all : display.none)
fill(upperBand_2, lowerBand_2, title="Bands Fill #2", color= color.new(color.olive, 95)    , display = showBand_2 ? display.all : display.none)

upperBand_3 = plot(upperBandValue3, title="Upper Band #3", color=color.teal, offset=offset, display = showBand_3 ? display.all : display.none)
lowerBand_3 = plot(lowerBandValue3, title="Lower Band #3", color=color.teal, offset=offset, display = showBand_3 ? display.all : display.none)
fill(upperBand_3, lowerBand_3, title="Bands Fill #3", color= color.new(color.teal, 95)    , display = showBand_3 ? display.all : display.none)

// === alternate resolution series crosses ===
xlong = ta.crossover(closeseriesalt, vwapValue)
xshort = ta.crossunder(closeseriesalt, vwapValue)
longcond = xlong
shortcond = xshort

// === high/low series setup ===
highseries = f_smma(high, malength)
lowseries = f_smma(low, malength)

// === price channel strategy ===
pcslength = input.int(2, title="Price Channel Length", tooltip="Length for the Price Channel strategy.")
hh = ta.highest(highseries, pcslength)
ll = ta.lowest(lowseries, pcslength)
longbreakoutcond = closeseriesalt > hh
shortbreakoutcond = closeseriesalt < ll

// === channel breakout strategy ===
cbslength = input.int(2, title="Channel Breakout Length", tooltip="Length for the Channel Breakout strategy.")
upbound = ta.highest(highseries, cbslength)
downbound = ta.lowest(lowseries, cbslength)
longcbsbreakoutcond = closeseriesalt > upbound + syminfo.mintick
shortcbsbreakoutcond = closeseriesalt < downbound - syminfo.mintick

// === execution logic ===
buy_signal = longcond and longbreakoutcond and longcbsbreakoutcond
sell_signal = shortcond and shortbreakoutcond and shortcbsbreakoutcond

// === signal labels ===
if buy_signal
    label.new(bar_index, low - 10, text = "Buy", style=label.style_label_up, color=color.teal, size=size.tiny)

if sell_signal
    label.new(bar_index, high + 10, text = "Sell", style=label.style_label_down, color=color.red, size=size.tiny)

// === alert conditions ===
alertcondition(buy_signal, title="Buy Signal", message="Buy")
alertcondition(sell_signal, title="Sell Signal", message="Sell")
